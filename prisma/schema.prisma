// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  settings          Json?     @default("{}")
  preferences       Json?     @default("{}")
  twoFactorEnabled  Boolean   @default(false)
  passwordLastChanged DateTime?
  devices           Device[]
  accounts          Account[]
  sessions          Session[]
}

model Device {
  id          String   @id @default(cuid())
  userId      String
  name        String
  lastActive  DateTime @default(now())
  location    String?
  isCurrent   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id             Int       @id @default(autoincrement())
  vrn            String    @unique
  roadTax        String
  fitness        String
  insurance      String
  pollution      String
  statePermit    String
  nationalPermit String
  lastUpdated    String
  status         String
  ownerId        String?
  registeredAt   String
  documents      Int
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  challans       Challan[]
  owner          User?     @relation(fields: [ownerId], references: [id])

  @@map("vehicles")
}

model Challan {
  id                    String   @id @default(cuid())
  rc_no                 String
  user_id               String
  vehicle_id            Int
  challan_no            String   @unique
  challan_status        String
  sent_to_reg_court     Boolean  @default(false)
  remark                String?
  sent_to_virtual_court Boolean  @default(false)
  amount_of_fine        Decimal  @db.Decimal(10, 2)
  state_code            String
  fine_imposed          Decimal  @db.Decimal(10, 2)
  challan_date_time     DateTime
  receipt_no            String?
  last_update           DateTime @default(now()) @updatedAt
  created_at            DateTime @default(now())
  user                  User     @relation(fields: [user_id], references: [id])
  vehicle               Vehicle  @relation(fields: [vehicle_id], references: [id])

  @@index([rc_no])
  @@index([user_id])
  @@index([challan_no])
  @@index([vehicle_id])
}

model Preference {
  id                       String   @id @default(uuid())
  userId                  String   @unique
  roadTaxVisibility       Boolean  @default(true)
  fitnessVisibility       Boolean  @default(true)
  insuranceVisibility     Boolean  @default(true)
  pollutionVisibility     Boolean  @default(true)
  statePermitVisibility   Boolean  @default(true)
  nationalPermitVisibility Boolean @default(true)
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  user                    User     @relation(fields: [userId], references: [id])

  @@map("preferences")
}