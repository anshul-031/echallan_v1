generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  BASIC
  CAB
  EV
  CHALLAN
  FLEET
  SUPER_USER
  ADMIN
  EMPLOYEE

}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  email               String             @unique
  password            String
  name                String?
  phone               String?
  address             String?
  dob                 DateTime?
  gender              String?
  image               String?
  location            String?
  userType            UserType           @default(BASIC)
  credits             Int                @default(0)
  companyId           String?            @db.ObjectId
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  challans            Challan[]
  preferences         Preference?
  vehicle_stats       UserVehicleStats?
  precedingChallan    PrecedingChallan[]
  vehicles            Vehicle[]
  renewalServices     RenewalService[]
  renewalStats        RenewalStats?
  company             Company?           @relation(fields: [companyId], references: [id])
  employeeProfile     Employee?
}

model Employee {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique @db.ObjectId
  doj             DateTime  // Date of joining
  designation     String
  reportTo        String?   // Superior's name/id
  assignedUsers   String[]  // Array of user emails assigned to this employee
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])

  @@map("employees")
}

model Company {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  address      String
  ownerName    String
  ownerPhone   String
  contactName  String
  contactPhone String
  status       Boolean   @default(true)  // true for active, false for inactive
  image        String?
  gstin        String?   // GSTIN number
  pan          String?   // PAN number
  cin          String?   // CIN number
  users        User[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("companies")
}

model Vehicle {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  vrn               String
  roadTax           String
  roadTaxDoc        String?
  fitness           String
  fitnessDoc        String?
  insurance         String
  insuranceDoc      String?
  pollution         String
  pollutionDoc      String?
  statePermit       String
  statePermitDoc    String?
  nationalPermit    String
  nationalPermitDoc String?
  lastUpdated       String
  status            String
  ownerId           String?            @db.ObjectId
  registeredAt      String
  documents         Int
  precedingChallan  PrecedingChallan[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  challans          Challan[]
  renewalServices   RenewalService[]
  owner             User?              @relation(fields: [ownerId], references: [id])

  @@map("vehicles")
}

model UserVehicleStats {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String   @unique @db.ObjectId
  total_vehicles         Int      @default(0)
  expiring_count         Int      @default(0)
  expired_count          Int      @default(0)
  expiring_roadTax       Int      @default(0)
  expiring_fitness       Int      @default(0)
  expiring_insurance     Int      @default(0)
  expiring_pollution     Int      @default(0)
  expiring_statePermit   Int      @default(0)
  expiring_nationalPermit Int     @default(0)
  expired_roadTax        Int      @default(0)
  expired_fitness        Int      @default(0)
  expired_insurance      Int      @default(0)
  expired_pollution      Int      @default(0)
  expired_statePermit    Int      @default(0)
  expired_nationalPermit Int      @default(0)
  expiring_3m_count      Int      @default(0)
  expiring_3m_roadTax    Int      @default(0)
  expiring_3m_fitness    Int      @default(0)
  expiring_3m_insurance  Int      @default(0)
  expiring_3m_pollution  Int      @default(0)
  expiring_3m_statePermit Int     @default(0)
  expiring_3m_nationalPermit Int  @default(0)
  expiring_6m_count      Int      @default(0)
  expiring_6m_roadTax    Int      @default(0)
  expiring_6m_fitness    Int      @default(0)
  expiring_6m_insurance  Int      @default(0)
  expiring_6m_pollution  Int      @default(0)
  expiring_6m_statePermit Int     @default(0)
  expiring_6m_nationalPermit Int  @default(0)
  expiring_1y_count      Int      @default(0)
  expiring_1y_roadTax    Int      @default(0)
  expiring_1y_fitness    Int      @default(0)
  expiring_1y_insurance  Int      @default(0)
  expiring_1y_pollution  Int      @default(0)
  expiring_1y_statePermit Int     @default(0)
  expiring_1y_nationalPermit Int  @default(0)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])

  @@map("user_vehicle_stats")
}

model Challan {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  rc_no                 String
  user_id               String           @db.ObjectId
  vehicle_id            String           @db.ObjectId
  challan_no            String           @unique
  challan_status        String
  sent_to_reg_court     String
  remark                String?
  sent_to_virtual_court String
  amount_of_fine        Float
  state_code            String
  fine_imposed          Float
  challan_date_time     DateTime
  receipt_no            String?
  last_update           DateTime         @default(now()) @updatedAt
  created_at            DateTime         @default(now())
  user                  User             @relation(fields: [user_id], references: [id])
  vehicle               Vehicle          @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  precedingChallan      PrecedingChallan?

  @@index([rc_no])
  @@index([user_id])
  @@index([vehicle_id])
}

model Preference {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String   @unique @db.ObjectId
  roadTaxVisibility        Boolean  @default(true)
  fitnessVisibility        Boolean  @default(true)
  insuranceVisibility      Boolean  @default(true)
  pollutionVisibility      Boolean  @default(true)
  statePermitVisibility    Boolean  @default(true)
  nationalPermitVisibility Boolean  @default(true)
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  user                     User     @relation(fields: [userId], references: [id])

  @@map("preferences")
}

model PrecedingChallan {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  challan_id            String   @unique @db.ObjectId
  rc_no                 String
  user_id               String   @db.ObjectId
  challan_no            String   @unique
  challan_status        String
  sent_to_reg_court     String
  sent_to_virtual_court String
  amount_of_fine        Float
  fine_imposed          Float
  receipt_no            String?
  payment_at            DateTime @default(now())
  vehicle_id            String   @db.ObjectId
  user                  User     @relation(fields: [user_id], references: [id])
  vehicle               Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  challan               Challan  @relation(fields: [challan_id], references: [id], onDelete: Cascade)

  @@index([rc_no])
  @@index([user_id])
}

model RenewalService {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  services          String?
  isAssignedService Boolean?
  vehicle_no        String?
  vehicleId         String?              @db.ObjectId @map("vehicle_id")
  userId            String?              @db.ObjectId @map("user_id")
  govFees           Float?
  serviceCharge     Float?
  price             Float?
  govtFees          Boolean              @default(false)
  rtoApproval       Boolean              @default(false)
  inspection        Boolean              @default(false)
  certificate       Boolean              @default(false)
  documentDelivered Boolean              @default(false)
  status            RenewalServiceStatus @default(pending)
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  
  vehicle           Vehicle?             @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user              User?                @relation(fields: [userId], references: [id])

  @@map("renewal_services")
  @@index([vehicleId])
  @@index([userId])
}

enum RenewalServiceStatus {
  pending
  processing
  completed
  cancelled
}

model RenewalStats {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @db.ObjectId
  totalServices     Int      @default(0)
  pendingCount      Int      @default(0)
  processingCount   Int      @default(0)
  completedCount    Int      @default(0)
  cancelledCount    Int      @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id])

  @@map("renewal_stats")
}

model AdminStats {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  totalUsers        Int      @default(0)
  totalCustomers    Int      @default(0)
  totalEmployees    Int      @default(0)
  totalVehicles     Int      @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("admin_stats")
}