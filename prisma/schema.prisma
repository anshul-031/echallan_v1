generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  name       String?
  credits    Int         @default(0)
  role       String      @default("user")
  created_at DateTime    @default(now())
  updated_at DateTime
  challans    Challan[]
  preferences Preference?
  vehicle_stats       UserVehicleStats? 
  precedingChallan  PrecedingChallan[]
  vehicles    Vehicle[]
}


model Vehicle {
  id             Int       @id @default(autoincrement())
  vrn            String    
  roadTax        String
  fitness        String
  insurance      String
  pollution      String
  statePermit    String
  nationalPermit String
  lastUpdated    String
  status         String
  ownerId        String?
  registeredAt   String
  documents      Int
  precedingChallan  PrecedingChallan[]
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  challans       Challan[]
  owner          User?    @relation(fields: [ownerId], references: [id])

  @@map("vehicles")
}

model UserVehicleStats {
  id                     String   @id @default(uuid())
  userId                 String   @unique  // Foreign key to User
  total_vehicles         Int      @default(0)  // Total number of vehicles owned
  expiring_count         Int      @default(0)  // Total expiring documents
  expired_count          Int      @default(0)  // Total expired documents
  expiring_roadTax       Int      @default(0)  // Count of expiring roadTax
  expiring_fitness       Int      @default(0)  // Count of expiring fitness
  expiring_insurance     Int      @default(0)  // Count of expiring insurance
  expiring_pollution     Int      @default(0)  // Count of expiring pollution
  expiring_statePermit   Int      @default(0)  // Count of expiring statePermit
  expiring_nationalPermit Int     @default(0)  // Count of expiring nationalPermit
  expired_roadTax        Int      @default(0)  // Count of expired roadTax
  expired_fitness        Int      @default(0)  // Count of expired fitness
  expired_insurance      Int      @default(0)  // Count of expired insurance
  expired_pollution      Int      @default(0)  // Count of expired pollution
  expired_statePermit    Int      @default(0)  // Count of expired statePermit
  expired_nationalPermit Int      @default(0)  // Count of expired nationalPermit
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])

  @@map("user_vehicle_stats")
}

model Challan {
  id                    String   @id @default(cuid())
  rc_no                 String
  user_id               String
  vehicle_id            Int
  challan_no            String   @unique
  challan_status        String
  sent_to_reg_court     String
  remark                String?
  sent_to_virtual_court String
  amount_of_fine        Decimal  @db.Decimal(10, 2)
  state_code            String
  fine_imposed          Decimal  @db.Decimal(10, 2)
  challan_date_time     DateTime
  receipt_no            String?
  last_update           DateTime @default(now()) @updatedAt
  created_at            DateTime @default(now())
  user                  User    @relation(fields: [user_id], references: [id])
  vehicle               Vehicle  @relation(fields: [vehicle_id], references: [id] , onDelete: Cascade) 
  precedingChallan      PrecedingChallan?

  @@index([rc_no])
  @@index([user_id])
  @@index([challan_no])
  @@index([vehicle_id])
}

model Preference {
  id                       String   @id @default(uuid())
  userId                   String   @unique
  roadTaxVisibility        Boolean  @default(true)
  fitnessVisibility        Boolean  @default(true)
  insuranceVisibility      Boolean  @default(true)
  pollutionVisibility      Boolean  @default(true)
  statePermitVisibility    Boolean  @default(true)
  nationalPermitVisibility Boolean  @default(true)
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  user                     User    @relation(fields: [userId], references: [id])

  @@map("preferences")
}

model PrecedingChallan {
  id                  String   @id @default(uuid())
  challan_id            String  @unique
  rc_no                 String
  user_id               String
  challan_no            String   @unique
  challan_status        String
  sent_to_reg_court     String
  sent_to_virtual_court String
  amount_of_fine        Decimal  @db.Decimal(10, 2)
  fine_imposed          Decimal  @db.Decimal(10, 2)
  receipt_no            String?
  payment_at            DateTime @default(now())
  vehicle_id            Int
  user                  User     @relation(fields: [user_id], references: [id])
  vehicle               Vehicle  @relation(fields: [vehicle_id], references: [id])
  challan               Challan  @relation(fields: [challan_id], references: [id])

  @@index([rc_no])
  @@index([challan_id])
  @@index([user_id])
}