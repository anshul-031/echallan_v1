generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  email               String             @unique
  password            String
  name                String?
  credits             Int                @default(0)
  role                String             @default("user")
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  challans            Challan[]
  preferences         Preference?
  vehicle_stats       UserVehicleStats?
  precedingChallan    PrecedingChallan[]
  vehicles            Vehicle[]
  renewalServices     RenewalService[]
  renewalStats        RenewalStats?      // Added relation to RenewalStats
}

model Vehicle {
  id                Int                @id @default(autoincrement())
  vrn               String
  roadTax           String
  roadTaxDoc        String?            // New field for roadTax document
  fitness           String
  fitnessDoc        String?            // New field for fitness document
  insurance         String
  insuranceDoc      String?            // New field for insurance document
  pollution         String
  pollutionDoc      String?            // New field for pollution document
  statePermit       String
  statePermitDoc    String?            // New field for statePermit document
  nationalPermit    String
  nationalPermitDoc String?            // New field for nationalPermit document
  lastUpdated       String
  status            String
  ownerId           String?
  registeredAt      String
  documents         Int
  precedingChallan  PrecedingChallan[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  challans          Challan[]
  renewalServices   RenewalService[]
  owner             User?              @relation(fields: [ownerId], references: [id])

  @@map("vehicles")
}

model UserVehicleStats {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  total_vehicles         Int      @default(0)
  // Existing counts (expiring within 1 month, expired)
  expiring_count         Int      @default(0)  // Documents expiring within 1 month
  expired_count          Int      @default(0)  // Documents already expired
  expiring_roadTax       Int      @default(0)
  expiring_fitness       Int      @default(0)
  expiring_insurance     Int      @default(0)
  expiring_pollution     Int      @default(0)
  expiring_statePermit   Int      @default(0)
  expiring_nationalPermit Int     @default(0)
  expired_roadTax        Int      @default(0)
  expired_fitness        Int      @default(0)
  expired_insurance      Int      @default(0)
  expired_pollution      Int      @default(0)
  expired_statePermit    Int      @default(0)
  expired_nationalPermit Int      @default(0)
  // New counts for 3 months
  expiring_3m_count      Int      @default(0)  // Documents expiring within 1-3 months
  expiring_3m_roadTax    Int      @default(0)
  expiring_3m_fitness    Int      @default(0)
  expiring_3m_insurance  Int      @default(0)
  expiring_3m_pollution  Int      @default(0)
  expiring_3m_statePermit Int     @default(0)
  expiring_3m_nationalPermit Int  @default(0)
  // New counts for 6 months
  expiring_6m_count      Int      @default(0)  // Documents expiring within 3-6 months
  expiring_6m_roadTax    Int      @default(0)
  expiring_6m_fitness    Int      @default(0)
  expiring_6m_insurance  Int      @default(0)
  expiring_6m_pollution  Int      @default(0)
  expiring_6m_statePermit Int     @default(0)
  expiring_6m_nationalPermit Int  @default(0)
  // New counts for 1 year
  expiring_1y_count      Int      @default(0)  // Documents expiring within 6-12 months
  expiring_1y_roadTax    Int      @default(0)
  expiring_1y_fitness    Int      @default(0)
  expiring_1y_insurance  Int      @default(0)
  expiring_1y_pollution  Int      @default(0)
  expiring_1y_statePermit Int     @default(0)
  expiring_1y_nationalPermit Int  @default(0)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])

  @@map("user_vehicle_stats")
}

model Challan {
  id                    String           @id @default(cuid())
  rc_no                 String
  user_id               String
  vehicle_id            Int
  challan_no            String           @unique
  challan_status        String
  sent_to_reg_court     String
  remark                String?
  sent_to_virtual_court String
  amount_of_fine        Decimal          @db.Decimal(10, 2)
  state_code            String
  fine_imposed          Decimal          @db.Decimal(10, 2)
  challan_date_time     DateTime
  receipt_no            String?
  last_update           DateTime         @default(now()) @updatedAt
  created_at            DateTime         @default(now())
  user                  User            @relation(fields: [user_id], references: [id])
  vehicle               Vehicle         @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  precedingChallan      PrecedingChallan?

  @@index([rc_no])
  @@index([user_id])
  @@index([challan_no])
  @@index([vehicle_id])
}

model Preference {
  id                       String   @id @default(uuid())
  userId                   String   @unique
  roadTaxVisibility        Boolean  @default(true)
  fitnessVisibility        Boolean  @default(true)
  insuranceVisibility      Boolean  @default(true)
  pollutionVisibility      Boolean  @default(true)
  statePermitVisibility    Boolean  @default(true)
  nationalPermitVisibility Boolean  @default(true)
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  user                     User    @relation(fields: [userId], references: [id])

  @@map("preferences")
}

model PrecedingChallan {
  id                  String   @id @default(uuid())
  challan_id          String   @unique
  rc_no               String
  user_id             String
  challan_no          String   @unique
  challan_status      String
  sent_to_reg_court   String
  sent_to_virtual_court String
  amount_of_fine      Decimal  @db.Decimal(10, 2)
  fine_imposed        Decimal  @db.Decimal(10, 2)
  receipt_no          String?
  payment_at          DateTime @default(now())
  vehicle_id          Int
  user                User     @relation(fields: [user_id], references: [id])
  vehicle             Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  challan             Challan  @relation(fields: [challan_id], references: [id], onDelete: Cascade)

  @@index([rc_no])
  @@index([challan_id])
  @@index([user_id])
}

model RenewalService {
  id                Int                   @id @default(autoincrement())
  services          String?
  isAssignedService Boolean?
  vehicle_no        String?
  vehicleId         Int?                  @map("vehicle_id")
  userId            String?               @map("user_id")
  govFees           Decimal?              @db.Decimal(10, 2)
  serviceCharge     Decimal?              @db.Decimal(10, 2)
  price             Decimal?              @db.Decimal(10, 2)
  govtFees          Boolean               @default(false)
  rtoApproval       Boolean               @default(false)
  inspection        Boolean               @default(false)
  certificate       Boolean               @default(false)
  documentDelivered Boolean               @default(false)
  status            RenewalServiceStatus  @default(pending)
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")
  
  vehicle           Vehicle?              @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user              User?                 @relation(fields: [userId], references: [id])

  @@map("renewal_services")
  @@index([vehicleId])
  @@index([userId])
}

enum RenewalServiceStatus {
  pending
  processing
  completed
  cancelled
}

// New RenewalStats model to track counts of renewal services
model RenewalStats {
  id                String   @id @default(uuid())
  userId            String   @unique
  totalServices     Int      @default(0)  // Total number of renewal services
  pendingCount      Int      @default(0)  // Count of services with status "pending"
  processingCount   Int      @default(0)  // Count of services with status "processing"
  completedCount    Int      @default(0)  // Count of services with status "completed"
  cancelledCount    Int      @default(0)  // Count of services with status "cancelled"
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id])

  @@map("renewal_stats")
}